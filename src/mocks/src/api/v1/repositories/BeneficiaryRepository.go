// Code generated by mockery v2.14.0. DO NOT EDIT.

package mocks

import (
	mock "github.com/stretchr/testify/mock"
	domain "transfeera.backend.developer.test/src/api/v1/domain"

	model "transfeera.backend.developer.test/src/api/v1/repositories/model"
)

// BeneficiaryRepository is an autogenerated mock type for the BeneficiaryRepository type
type BeneficiaryRepository struct {
	mock.Mock
}

// Create provides a mock function with given fields: data
func (_m *BeneficiaryRepository) Create(data domain.Beneficiary) (*model.Beneficiary, error) {
	ret := _m.Called(data)

	var r0 *model.Beneficiary
	if rf, ok := ret.Get(0).(func(domain.Beneficiary) *model.Beneficiary); ok {
		r0 = rf(data)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*model.Beneficiary)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(domain.Beneficiary) error); ok {
		r1 = rf(data)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Delete provides a mock function with given fields: ids
func (_m *BeneficiaryRepository) Delete(ids []uint) error {
	ret := _m.Called(ids)

	var r0 error
	if rf, ok := ret.Get(0).(func([]uint) error); ok {
		r0 = rf(ids)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Get provides a mock function with given fields: filter
func (_m *BeneficiaryRepository) Get(filter string) (model.Beneficiaries, error) {
	ret := _m.Called(filter)

	var r0 model.Beneficiaries
	if rf, ok := ret.Get(0).(func(string) model.Beneficiaries); ok {
		r0 = rf(filter)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(model.Beneficiaries)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(filter)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetByID provides a mock function with given fields: id
func (_m *BeneficiaryRepository) GetByID(id uint) (*model.Beneficiary, error) {
	ret := _m.Called(id)

	var r0 *model.Beneficiary
	if rf, ok := ret.Get(0).(func(uint) *model.Beneficiary); ok {
		r0 = rf(id)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*model.Beneficiary)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(uint) error); ok {
		r1 = rf(id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Update provides a mock function with given fields: data
func (_m *BeneficiaryRepository) Update(data *model.Beneficiary) (*model.Beneficiary, error) {
	ret := _m.Called(data)

	var r0 *model.Beneficiary
	if rf, ok := ret.Get(0).(func(*model.Beneficiary) *model.Beneficiary); ok {
		r0 = rf(data)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*model.Beneficiary)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(*model.Beneficiary) error); ok {
		r1 = rf(data)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

type mockConstructorTestingTNewBeneficiaryRepository interface {
	mock.TestingT
	Cleanup(func())
}

// NewBeneficiaryRepository creates a new instance of BeneficiaryRepository. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewBeneficiaryRepository(t mockConstructorTestingTNewBeneficiaryRepository) *BeneficiaryRepository {
	mock := &BeneficiaryRepository{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
